name: Build and Test Educational Compiler

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        build_type: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          flex \
          bison \
          gcc \
          g++
          
    - name: Verify dependencies
      run: |
        echo "=== Dependency versions ==="
        cmake --version
        flex --version
        bison --version
        gcc --version
        g++ --version
        
    - name: Create build directory
      run: mkdir -p build
      
    - name: Configure CMake
      run: |
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_VERBOSE_MAKEFILE=ON
          
    - name: Build compiler
      run: |
        cd build
        make -j$(nproc)
        
    - name: Verify build artifacts
      run: |
        echo "=== Build artifacts ==="
        ls -la build/bin/
        file build/bin/compiler
        
    - name: Run all tests
      run: |
        cd build
        make test-all
        
    - name: Test individual components
      run: |
        echo "=== Testing basic functionality ==="
        
        # Test simple program
        echo 'int x; x = 42; print x;' > test_basic.prog
        ./build/bin/compiler test_basic.prog test_basic.s
        
        if [ -f test_basic.s ]; then
          echo "✅ Basic compilation test passed"
          echo "Generated assembly:"
          head -20 test_basic.s
        else
          echo "❌ Basic compilation test failed"
          exit 1
        fi
        
        # Test complex program if it exists
        if [ -f tests/test.prog ]; then
          ./build/bin/compiler tests/test.prog test_complex.s
          if [ -f test_complex.s ]; then
            echo "✅ Complex program compilation passed"
          else
            echo "❌ Complex program compilation failed"
            exit 1
          fi
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: compiler-${{ matrix.build_type }}-${{ github.sha }}
        path: |
          build/bin/compiler
          build/test_outputs/
          *.s
        retention-days: 30
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.build_type }}-${{ github.sha }}
        path: build/test_outputs/
        retention-days: 7

  static-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cppcheck \
          clang-tidy \
          build-essential \
          cmake \
          flex \
          bison
          
    - name: Run cppcheck
      run: |
        echo "=== Running cppcheck ==="
        cppcheck --enable=all --inconclusive --std=c++17 \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          --quiet \
          src/ || true
          
    - name: Check code formatting
      run: |
        echo "=== Checking basic code style ==="
        # Проверяем основные стилистические проблемы
        find src/ -name "*.cpp" -o -name "*.hpp" | while read file; do
          echo "Checking $file..."
          # Проверяем на trailing whitespace
          if grep -q '[[:space:]]$' "$file"; then
            echo "Warning: Trailing whitespace found in $file"
          fi
          # Проверяем на смешанные tab/spaces (базовая проверка)
          if grep -qP '\t' "$file" && grep -qP '^    ' "$file"; then
            echo "Warning: Mixed tabs and spaces in $file"
          fi
        done

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate README
      run: |
        echo "=== Validating documentation ==="
        
        # Проверяем наличие основных разделов в README
        if ! grep -q "## Описание проекта" README.md; then
          echo "❌ Missing project description in README"
          exit 1
        fi
        
        if ! grep -q "## Сборка и запуск" README.md; then
          echo "❌ Missing build instructions in README"
          exit 1
        fi
        
        if ! grep -q "## Примеры использования" README.md; then
          echo "❌ Missing usage examples in README"
          exit 1
        fi
        
        echo "✅ README validation passed"
        
    - name: Check project structure
      run: |
        echo "=== Validating project structure ==="
        
        # Проверяем наличие необходимых файлов
        required_files=(
          "CMakeLists.txt"
          "src/main.cpp"
          "src/lexer.l"
          "src/parser.y"
          "src/ast.hpp"
          "src/ast.cpp"
          "src/codegen.hpp"
          "src/codegen.cpp"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing required file: $file"
            exit 1
          else
            echo "✅ Found: $file"
          fi
        done
        
        echo "✅ Project structure validation passed"
